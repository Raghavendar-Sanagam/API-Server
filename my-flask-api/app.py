# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UtYMFotam5w7LXs9l9AiMf3lUdQ_0V7n
"""

!pip install Flask Flask-GraphQL graphene flask_sqlalchemy

!pip install flask flask-graphql graphene pyngrok

from pyngrok import ngrok

ngrok.set_auth_token("2uzsa9AVwyriYNH1fsxY2sDQw0r_2nHG4FeWCVpT9rmxVLUdr")

import graphene
from flask import Flask
from flask_graphql import GraphQLView
from flask_sqlalchemy import SQLAlchemy
import pandas as pd
from pyngrok import ngrok

app = Flask(__name__)

app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///bank.db"
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
db = SQLAlchemy(app)

class Bank(db.Model):
    ifsc = db.Column(db.String(20), primary_key=True)
    bank_id = db.Column(db.Integer, nullable=False)
    branch = db.Column(db.String(100))
    address = db.Column(db.String(200))
    city = db.Column(db.String(100))
    district = db.Column(db.String(100))
    state = db.Column(db.String(100))
    bank_name = db.Column(db.String(100))

with app.app_context():
    db.create_all()

csv_file_path = "/content/bank_branches.csv"

def load_data():
    if not Bank.query.first():
        df = pd.read_csv(csv_file_path)
        for _, row in df.iterrows():
            bank = Bank(
                ifsc=row["ifsc"],
                bank_id=row["bank_id"],
                branch=row["branch"],
                address=row["address"],
                city=row["city"],
                district=row["district"],
                state=row["state"],
                bank_name=row["bank_name"]
            )
            db.session.add(bank)
        db.session.commit()

with app.app_context():
    load_data()

class BankType(graphene.ObjectType):
    ifsc = graphene.String()
    bank_id = graphene.Int()
    branch = graphene.String()
    address = graphene.String()
    city = graphene.String()
    district = graphene.String()
    state = graphene.String()
    bank_name = graphene.String()

class Query(graphene.ObjectType):
    banks = graphene.List(BankType)
    ifsc = graphene.Field(BankType, ifsc=graphene.String())
    bank_id = graphene.List(BankType, bank_id=graphene.Int())
    branch = graphene.List(BankType, branch=graphene.String())
    address = graphene.List(BankType, address=graphene.String())
    city = graphene.List(BankType, city=graphene.String())
    district = graphene.List(BankType, district=graphene.String())
    state = graphene.List(BankType, state=graphene.String())
    bank_name = graphene.List(BankType, bank_name=graphene.String())

    def resolve_banks(self, info):
        return Bank.query.all()

    def resolve_ifsc(self, info, ifsc):
        return Bank.query.filter_by(ifsc=ifsc).first()

    def resolve_bank_id(self, info, bank_id):
        return Bank.query.filter_by(bank_id=bank_id).all()

    def resolve_branch(self, info, branch):
        return Bank.query.filter_by(branch=branch).all()

    def resolve_address(self, info, address):
        return Bank.query.filter_by(address=address).all()

    def resolve_city(self, info, city):
        return Bank.query.filter_by(city=city).all()

    def resolve_district(self, info, district):
        return Bank.query.filter_by(district=district).all()

    def resolve_state(self, info, state):
        return Bank.query.filter_by(state=state).all()

    def resolve_bank_name(self, info, bank_name):
        return Bank.query.filter_by(bank_name=bank_name).all()

schema = graphene.Schema(query=Query)
app.add_url_rule("/gql", view_func=GraphQLView.as_view("graphql", schema=schema, graphiql=True))

port = 5000
public_url = ngrok.connect(port).public_url
print(f"Public URL: {public_url}/gql")

app.run(port=port)