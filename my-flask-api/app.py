# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UtYMFotam5w7LXs9l9AiMf3lUdQ_0V7n
"""

!pip install Flask Flask-GraphQL graphene flask_sqlalchemy

!pip install flask flask-graphql graphene pyngrok

from pyngrok import ngrok

ngrok.set_auth_token("2uzsa9AVwyriYNH1fsxY2sDQw0r_2nHG4FeWCVpT9rmxVLUdr")

import graphene
from flask import Flask
from flask_graphql import GraphQLView
from flask_sqlalchemy import SQLAlchemy
import pandas as pd
import os
from pyngrok import ngrok

app = Flask(__name__)
app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///bank.db"
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False

db = SQLAlchemy(app)

class Bank(db.Model):
    ifsc = db.Column(db.String(20), primary_key=True)
    bank_id = db.Column(db.Integer, nullable=False)
    branch = db.Column(db.String(100))
    address = db.Column(db.String(200))
    city = db.Column(db.String(100))
    district = db.Column(db.String(100))
    state = db.Column(db.String(100))
    bank_name = db.Column(db.String(100))

with app.app_context():
    db.create_all()

csv_file_path = "/content/bank_branches.csv"

def load_data():
    if os.path.exists(csv_file_path) and not Bank.query.first():
        df = pd.read_csv(csv_file_path)
        for _, row in df.iterrows():
            bank = Bank(
                ifsc=row["ifsc"],
                bank_id=row["bank_id"],
                branch=row["branch"],
                address=row["address"],
                city=row["city"],
                district=row["district"],
                state=row["state"],
                bank_name=row["bank_name"]
            )
            db.session.add(bank)
        db.session.commit()

with app.app_context():
    load_data()

class BankType(graphene.ObjectType):
    ifsc = graphene.String()
    bank_id = graphene.Int(name = "bank_id")
    branch = graphene.String()
    address = graphene.String()
    city = graphene.String()
    district = graphene.String()
    state = graphene.String()
    bank_name = graphene.String(name="bank_name")

class BankEdge(graphene.ObjectType):
    node = graphene.Field(BankType)

class BankConnection(graphene.ObjectType):
    edges = graphene.List(BankEdge)

class Query(graphene.ObjectType):
    banks = graphene.Field(BankConnection, limit=graphene.Int(), offset=graphene.Int())
    branch = graphene.Field(BankConnection, branch=graphene.String(), limit=graphene.Int(), offset=graphene.Int())
    city = graphene.Field(BankConnection, city=graphene.String(), limit=graphene.Int(), offset=graphene.Int())
    district = graphene.Field(BankConnection, district=graphene.String(), limit=graphene.Int(), offset=graphene.Int())
    state = graphene.Field(BankConnection, state=graphene.String(), limit=graphene.Int(), offset=graphene.Int())
    bank_name = graphene.Field(BankConnection, bank_name=graphene.String(), limit=graphene.Int(), offset=graphene.Int())
    ifsc = graphene.Field(BankType, ifsc=graphene.String())

    def resolve_banks(self, info, limit=None, offset=None):
        query = Bank.query
        if offset:
            query = query.offset(offset)
        if limit:
            query = query.limit(limit)
        return BankConnection(edges=[BankEdge(node=bank) for bank in query.all()])

    def resolve_ifsc(self, info, ifsc):
        return Bank.query.filter_by(ifsc=ifsc).first()

    def resolve_branch(self, info, branch, limit=None, offset=None):
        query = Bank.query.filter(Bank.branch.ilike(f"%{branch}%"))
        if offset:
            query = query.offset(offset)
        if limit:
            query = query.limit(limit)
        return BankConnection(edges=[BankEdge(node=bank) for bank in query.all()])

    def resolve_city(self, info, city, limit=None, offset=None):
        query = Bank.query.filter(Bank.city.ilike(f"%{city}%"))
        if offset:
            query = query.offset(offset)
        if limit:
            query = query.limit(limit)
        return BankConnection(edges=[BankEdge(node=bank) for bank in query.all()])

    def resolve_district(self, info, district, limit=None, offset=None):
        query = Bank.query.filter(Bank.district.ilike(f"%{district}%"))
        if offset:
            query = query.offset(offset)
        if limit:
            query = query.limit(limit)
        return BankConnection(edges=[BankEdge(node=bank) for bank in query.all()])

    def resolve_state(self, info, state, limit=None, offset=None):
        query = Bank.query.filter(Bank.state.ilike(f"%{state}%"))
        if offset:
            query = query.offset(offset)
        if limit:
            query = query.limit(limit)
        return BankConnection(edges=[BankEdge(node=bank) for bank in query.all()])

    def resolve_bank_name(self, info, bank_name, limit=None, offset=None):
        query = Bank.query.filter(Bank.bank_name.ilike(f"%{bank_name}%"))
        if offset:
            query = query.offset(offset)
        if limit:
            query = query.limit(limit)
        return BankConnection(edges=[BankEdge(node=bank) for bank in query.all()])

schema = graphene.Schema(query=Query)
app.add_url_rule("/gql", view_func=GraphQLView.as_view("graphql", schema=schema, graphiql=True))

port = 5000
public_url = ngrok.connect(port).public_url
print(f"Public URL: {public_url}/gql")

app.run(port=port)
